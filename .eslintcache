[{"/Users/jamessheppard/Desktop/Coding/react-slider/src/index.js":"1","/Users/jamessheppard/Desktop/Coding/react-slider/src/App.js":"2","/Users/jamessheppard/Desktop/Coding/react-slider/src/reportWebVitals.js":"3","/Users/jamessheppard/Desktop/Coding/react-slider/src/components/ImageSlider.js":"4","/Users/jamessheppard/Desktop/Coding/react-slider/src/components/Example.js":"5"},{"size":500,"mtime":1607990439264,"results":"6","hashOfConfig":"7"},{"size":608,"mtime":1608228258072,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1607990439270,"results":"9","hashOfConfig":"7"},{"size":8111,"mtime":1608291203407,"results":"10","hashOfConfig":"7"},{"size":2405,"mtime":1608137718363,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1mn8kgg",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"/Users/jamessheppard/Desktop/Coding/react-slider/src/index.js",[],["25","26"],"/Users/jamessheppard/Desktop/Coding/react-slider/src/App.js",[],"/Users/jamessheppard/Desktop/Coding/react-slider/src/reportWebVitals.js",[],"/Users/jamessheppard/Desktop/Coding/react-slider/src/components/ImageSlider.js",[],"/Users/jamessheppard/Desktop/Coding/react-slider/src/components/Example.js",["27","28"],"import react, { useEffect, useRef } from 'react';\nimport gsap from 'gsap';\nimport { Draggable } from 'gsap/Draggable';\n\nconst divStyles = {\n  width: '200px',\n  backgroundColor: 'red',\n  color: 'black',\n};\n\nexport default function ColorSlides() {\n  let imageList = useRef(null);\n\n  useEffect(() => {\n    gsap.registerPlugin(Draggable);\n\n    console.log(imageList.children);\n\n    Draggable.create('.slides-container', {\n      trigger: '.slides-inner',\n      type: 'x',\n      onClick: function () {\n        console.log('clicked');\n      },\n      onPress: function () {\n        //record the starting values so we can compare them later...\n        startX = this.x;\n      },\n      onDrag: function () {\n        let totalChange = this.x + startX,\n          direction = [];\n        if (totalChange > startX) {\n          direction.push('right');\n        } else if (totalChange < startX) {\n          direction.push('left');\n        }\n        console.log(direction);\n      },\n    });\n  }, [imageList]);\n\n  // const proxy = document.createElement('div');\n\n  let startX;\n\n  return (\n    <>\n      <main style={{ height: '100%' }}>\n        <div\n          style={{\n            width: '200px',\n            height: '500px',\n          }}\n          className=\"slides-container\"\n        >\n          <div\n            style={{ marginLeft: '400px', width: '200px', height: '1000px' }}\n            ref={(el) => (imageList = el)}\n            className=\"slides-inner\"\n          >\n            <div style={divStyles} className=\"slide\">\n              1\n            </div>\n            <div style={divStyles} className=\"slide\">\n              2\n            </div>\n            <div style={divStyles} className=\"slide\">\n              3\n            </div>\n            <div style={divStyles} className=\"slide\">\n              4\n            </div>\n            <div style={divStyles} className=\"slide\">\n              5\n            </div>\n            <div style={divStyles} className=\"slide\">\n              6\n            </div>\n            <div style={divStyles} className=\"slide\">\n              7\n            </div>\n            <div style={divStyles} className=\"slide\">\n              8\n            </div>\n            <div style={divStyles} className=\"slide\">\n              9\n            </div>\n            <div style={divStyles} className=\"slide\">\n              10\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n",["29","30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":13},{"ruleId":"39","severity":1,"message":"40","line":27,"column":18,"nodeType":"41","endLine":27,"endColumn":24},{"ruleId":"31","replacedBy":"42"},{"ruleId":"33","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'startX' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression",["44"],["45"],"no-global-assign","no-unsafe-negation"]